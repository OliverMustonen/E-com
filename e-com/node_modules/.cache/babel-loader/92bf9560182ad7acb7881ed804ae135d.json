{"ast":null,"code":"import actiontypes from \"../actiontypes\";\nconst initState = {\n  shoppingCart: [],\n  totalCartQuantity: 0,\n  totalCartAmount: 0\n};\n\nconst cartReducer = (state = initState, action) => {\n  let itemIndex;\n\n  switch (action.type) {\n    case actiontypes().cart.add:\n      itemIndex = state.shoppingCart.findIndex(product => product._id === action.payload._id);\n      itemIndex < 0 ? state.shoppingCart = [...state.shoppingCart, { ...action.payload,\n        quantity: 1\n      }] : state.shoppingCart[itemIndex].quantity += 1;\n      state.totalCartAmount = getTotalAmount(state.shoppingCart);\n      state.totalCartQuantity = getTotalQuantity(state.shoppingCart);\n      return state;\n    // if(itemIndex < 0) {\n    //   console.log(1)\n    //   return {\n    //    ...state,\n    //    shoppingCart: [...state.shoppingCart, {...action.payload, quantity: 1}]\n    //  }\n    // } else {\n    // }\n\n    case actiontypes().cart.sub:\n      action.payload.quantity === 1 ? state.shoppingCart = state.shoppingCart.filter(product => product._id !== action.payload._id) : action.payload.quantity -= 1; // itemIndex = state.shoppingCart.findIndex(product => product._id === action.payload)\n      // state.shoppingCart[itemIndex].quantity === 1\n      // ? state.shoppingCart = state.shoppingCart.filter(product => product._id !== action.payload)\n      // : state.shoppingCart[itemIndex].quantity -= 1\n\n      state.totalCartAmount = getTotalAmount(state.shoppingCart);\n      state.totalCartQuantity = getTotalQuantity(state.shoppingCart);\n      return state;\n\n    case actiontypes().cart.delete:\n      state.shoppingCart = state.shoppingCart.filter(product => product._id !== action.payload);\n      state.totalCartAmount = getTotalAmount(state.shoppingCart);\n      state.totalCartQuantity = getTotalQuantity(state.shoppingCart);\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nconst getTotalQuantity = cart => {\n  let total = 0;\n  cart.forEach(product => {\n    total += product.quantity;\n  });\n  return total;\n};\n\nconst getTotalAmount = cart => {\n  let total = 0;\n  cart.forEach(product => {\n    total += product.price * product.quantity;\n  });\n  return total;\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["U:/Working-progress/INLÄMNINGSUPPGIFTER/JV 3 INLÄMNINGSUPPGIFT/Inlämningsuppgift/JS-3/e-com/src/store/reducers/cartReducer.js"],"names":["actiontypes","initState","shoppingCart","totalCartQuantity","totalCartAmount","cartReducer","state","action","itemIndex","type","cart","add","findIndex","product","_id","payload","quantity","getTotalAmount","getTotalQuantity","sub","filter","delete","total","forEach","price"],"mappings":"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","sourcesContent":["import actiontypes from \"../actiontypes\";\r\n\r\nconst initState = {\r\n  shoppingCart: [],\r\n  totalCartQuantity: 0,\r\n  totalCartAmount: 0\r\n}\r\n\r\nconst cartReducer = (state = initState, action) => {\r\n  let itemIndex\r\n  switch(action.type) {\r\n    case actiontypes().cart.add:\r\n      itemIndex = state.shoppingCart.findIndex(product => product._id === action.payload._id)\r\n      itemIndex < 0\r\n      ? state.shoppingCart = [...state.shoppingCart, {...action.payload, quantity: 1}]\r\n      : state.shoppingCart[itemIndex].quantity += 1\r\n\r\n      state.totalCartAmount = getTotalAmount(state.shoppingCart)\r\n      state.totalCartQuantity = getTotalQuantity(state.shoppingCart)\r\n\r\n      return state\r\n      // if(itemIndex < 0) {\r\n      //   console.log(1)\r\n      //   return {\r\n      //    ...state,\r\n      //    shoppingCart: [...state.shoppingCart, {...action.payload, quantity: 1}]\r\n      //  }\r\n      // } else {\r\n        \r\n      // }\r\n      \r\n\r\n    case actiontypes().cart.sub:\r\n      action.payload.quantity === 1\r\n      ? state.shoppingCart = state.shoppingCart.filter(product => product._id !== action.payload._id)\r\n      : action.payload.quantity -= 1\r\n\r\n      // itemIndex = state.shoppingCart.findIndex(product => product._id === action.payload)\r\n\r\n      // state.shoppingCart[itemIndex].quantity === 1\r\n      // ? state.shoppingCart = state.shoppingCart.filter(product => product._id !== action.payload)\r\n      // : state.shoppingCart[itemIndex].quantity -= 1\r\n\r\n      state.totalCartAmount = getTotalAmount(state.shoppingCart)\r\n      state.totalCartQuantity = getTotalQuantity(state.shoppingCart)\r\n\r\n\r\n      return state\r\n\r\n\r\n\r\n    case actiontypes().cart.delete:\r\n      state.shoppingCart = state.shoppingCart.filter(product => product._id !== action.payload)\r\n      state.totalCartAmount = getTotalAmount(state.shoppingCart)\r\n      state.totalCartQuantity = getTotalQuantity(state.shoppingCart)\r\n      return state;\r\n\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\nconst getTotalQuantity = cart => {\r\n  let total = 0;\r\n  cart.forEach(product => {\r\n    total += product.quantity\r\n  })\r\n  return total;\r\n}\r\n\r\nconst getTotalAmount = cart => {\r\n  let total = 0;\r\n\r\n  cart.forEach(product => {\r\n    total += product.price * product.quantity\r\n  })\r\n\r\n  return total;\r\n}\r\n\r\nexport default cartReducer;"]},"metadata":{},"sourceType":"module"}