{"ast":null,"code":"import actiontypes from \"../actiontypes\";\nconst initState = {\n  shoppingCart: [],\n  totalCartQuantity: 0,\n  totalCartAmount: 0\n};\n\nconst cartReducer = (state = initState, action) => {\n  let itemIndex;\n\n  switch (action.type) {\n    case actiontypes().cart.add:\n      itemIndex = state.shoppingCart.findIndex(product => product._id === action.payload._id);\n      itemIndex < 0 ? state.shoppingCart = [...state.shoppingCart, { ...action.payload,\n        quantity: 1\n      }] : state.shoppingCart[itemIndex].quantity += 1;\n      state.totalCartAmount = getTotalAmount(state.shoppingCart);\n      return state;\n\n    /* if(itemIndex < 0) {\r\n    return {\r\n       ...state,\r\n       shoppingCart: [...state.shoppingCart, {...action.payload, quantity: 1}]\r\n    }\r\n    } else {\r\n    \r\n    } */\n\n    case actiontypes().cart.sub:\n      itemIndex = state.shoppingCart.findIndex(product => product._id === action.payload);\n      state.shoppingCart[itemIndex].quantity === 1 ? state.shoppingCart = state.shoppingCart.filter(product => product._id !== action.payload) : state.shoppingCart[itemIndex].quantity -= 1;\n      state.totalCartAmount = getTotalAmount(state.shoppingCart);\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nconst getTotalAmount = cart => {\n  let total = 0;\n  cart.forEach(product => {\n    total += product.price * product.quantity;\n  });\n  return total;\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["U:/Working-progress/INLÄMNINGSUPPGIFTER/JV 3 INLÄMNINGSUPPGIFT/Inlämningsuppgift/JS-3/e-com/src/store/reducers/cartReducer.js"],"names":["actiontypes","initState","shoppingCart","totalCartQuantity","totalCartAmount","cartReducer","state","action","itemIndex","type","cart","add","findIndex","product","_id","payload","quantity","getTotalAmount","sub","filter","total","forEach","price"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,gBAAxB;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,YAAY,EAAE,EADA;AAEdC,EAAAA,iBAAiB,EAAE,CAFL;AAGdC,EAAAA,eAAe,EAAE;AAHH,CAAlB;;AASA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,SAAT,EAAoBM,MAApB,KAA+B;AAC/C,MAAIC,SAAJ;;AACJ,UAAOD,MAAM,CAACE,IAAd;AACI,SAAKT,WAAW,GAAGU,IAAd,CAAmBC,GAAxB;AACIH,MAAAA,SAAS,GAAGF,KAAK,CAACJ,YAAN,CAAmBU,SAAnB,CAA6BC,OAAO,IAAIA,OAAO,CAACC,GAAR,KAAgBP,MAAM,CAACQ,OAAP,CAAeD,GAAvE,CAAZ;AACAN,MAAAA,SAAS,GAAG,CAAZ,GACEF,KAAK,CAACJ,YAAN,GAAqB,CAAC,GAAGI,KAAK,CAACJ,YAAV,EAAwB,EAAC,GAAGK,MAAM,CAACQ,OAAX;AAAoBC,QAAAA,QAAQ,EAAE;AAA9B,OAAxB,CADvB,GAEEV,KAAK,CAACJ,YAAN,CAAmBM,SAAnB,EAA8BQ,QAA9B,IAA0C,CAF5C;AAIAV,MAAAA,KAAK,CAACF,eAAN,GAAwBa,cAAc,CAACX,KAAK,CAACJ,YAAP,CAAtC;AAEA,aAAOI,KAAP;;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,SAAKN,WAAW,GAAGU,IAAd,CAAmBQ,GAAxB;AACIV,MAAAA,SAAS,GAAGF,KAAK,CAACJ,YAAN,CAAmBU,SAAnB,CAA6BC,OAAO,IAAIA,OAAO,CAACC,GAAR,KAAgBP,MAAM,CAACQ,OAA/D,CAAZ;AAEAT,MAAAA,KAAK,CAACJ,YAAN,CAAmBM,SAAnB,EAA8BQ,QAA9B,KAA2C,CAA3C,GACEV,KAAK,CAACJ,YAAN,GAAqBI,KAAK,CAACJ,YAAN,CAAmBiB,MAAnB,CAA0BN,OAAO,IAAIA,OAAO,CAACC,GAAR,KAAgBP,MAAM,CAACQ,OAA5D,CADvB,GAEET,KAAK,CAACJ,YAAN,CAAmBM,SAAnB,EAA8BQ,QAA9B,IAA0C,CAF5C;AAIAV,MAAAA,KAAK,CAACF,eAAN,GAAwBa,cAAc,CAACX,KAAK,CAACJ,YAAP,CAAtC;AAEA,aAAOI,KAAP;;AAEJ;AACI,aAAOA,KAAP;AA/BR;AAiCC,CAnCD;;AAsCA,MAAMW,cAAc,GAAGP,IAAI,IAAI;AAC3B,MAAIU,KAAK,GAAG,CAAZ;AAEAV,EAAAA,IAAI,CAACW,OAAL,CAAaR,OAAO,IAAI;AACpBO,IAAAA,KAAK,IAAIP,OAAO,CAACS,KAAR,GAAgBT,OAAO,CAACG,QAAjC;AACH,GAFD;AAIA,SAAOI,KAAP;AACH,CARD;;AAUA,eAAef,WAAf","sourcesContent":["import actiontypes from \"../actiontypes\";\r\n\r\nconst initState = {\r\n    shoppingCart: [],\r\n    totalCartQuantity: 0,\r\n    totalCartAmount: 0\r\n}\r\n\r\n\r\n\r\n\r\nconst cartReducer = (state = initState, action) => {\r\n    let itemIndex\r\nswitch(action.type) {\r\n    case actiontypes().cart.add:\r\n        itemIndex = state.shoppingCart.findIndex(product => product._id === action.payload._id)\r\n        itemIndex < 0\r\n        ? state.shoppingCart = [...state.shoppingCart, {...action.payload, quantity: 1}]\r\n        : state.shoppingCart[itemIndex].quantity += 1\r\n\r\n        state.totalCartAmount = getTotalAmount(state.shoppingCart)\r\n\r\n        return state\r\n        /* if(itemIndex < 0) {\r\n        return {\r\n           ...state,\r\n           shoppingCart: [...state.shoppingCart, {...action.payload, quantity: 1}]\r\n       }\r\n    } else {\r\n        \r\n    } */\r\n\r\n    case actiontypes().cart.sub:\r\n        itemIndex = state.shoppingCart.findIndex(product => product._id === action.payload)\r\n       \r\n        state.shoppingCart[itemIndex].quantity === 1\r\n        ? state.shoppingCart = state.shoppingCart.filter(product => product._id !== action.payload)\r\n        : state.shoppingCart[itemIndex].quantity -= 1\r\n\r\n        state.totalCartAmount = getTotalAmount(state.shoppingCart)\r\n\r\n        return state\r\n\r\n    default:\r\n        return state\r\n }\r\n}\r\n\r\n\r\nconst getTotalAmount = cart => {\r\n    let total = 0;\r\n\r\n    cart.forEach(product => {\r\n        total += product.price * product.quantity\r\n    })\r\n\r\n    return total; \r\n}\r\n\r\nexport default cartReducer;"]},"metadata":{},"sourceType":"module"}