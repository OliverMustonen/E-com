{"ast":null,"code":"import actiontypes from \"../actiontypes\";\nconst initState = {\n  shoppingCart: [],\n  totalCartQuantity: 0,\n  totalCartAmount: 0\n};\n\nconst cartReducer = (state = initState, action) => {\n  switch (action.type) {\n    case actiontypes().cart.add:\n      let itemIndex = state.shoppingCart.findIndex(product => product._id === action.payload._id); //itemIndex < 0\n      // ? state.shoppingCart = [...state.shoppingCart, {...action.payload, quantity: 1}]\n      //: state.shoppingCart[itemIndex].quantity += 1\n\n      if (itemIndex < 0) {\n        return { ...state,\n          shoppingCart: [...state.shoppingCart, { ...action.payload,\n            quantity: 1\n          }]\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["U:/Working-progress/INLÄMNINGSUPPGIFTER/JV 3 INLÄMNINGSUPPGIFT/Inlämningsuppgift/JS-3/e-com/src/store/reducers/cartReducer.js"],"names":["actiontypes","initState","shoppingCart","totalCartQuantity","totalCartAmount","cartReducer","state","action","type","cart","add","itemIndex","findIndex","product","_id","payload","quantity"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,gBAAxB;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,YAAY,EAAE,EADA;AAEdC,EAAAA,iBAAiB,EAAE,CAFL;AAGdC,EAAAA,eAAe,EAAE;AAHH,CAAlB;;AASA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,SAAT,EAAoBM,MAApB,KAA+B;AACnD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKR,WAAW,GAAGS,IAAd,CAAmBC,GAAxB;AACI,UAAIC,SAAS,GAAGL,KAAK,CAACJ,YAAN,CAAmBU,SAAnB,CAA6BC,OAAO,IAAIA,OAAO,CAACC,GAAR,KAAgBP,MAAM,CAACQ,OAAP,CAAeD,GAAvE,CAAhB,CADJ,CAEI;AACD;AACC;;AACA,UAAGH,SAAS,GAAG,CAAf,EAAkB;AAClB,eAAO,EACJ,GAAGL,KADC;AAEJJ,UAAAA,YAAY,EAAE,CAAC,GAAGI,KAAK,CAACJ,YAAV,EAAwB,EAAC,GAAGK,MAAM,CAACQ,OAAX;AAAoBC,YAAAA,QAAQ,EAAE;AAA9B,WAAxB;AAFV,SAAP;AAIH,OALG,MAKG;AACH,eAAO,EACH,GAAGV;AADA,SAAP;AAGH;;AAGD;AACI,aAAOA,KAAP;AAnBR;AAqBC,CAtBD;;AAwBA,eAAeD,WAAf","sourcesContent":["import actiontypes from \"../actiontypes\";\r\n\r\nconst initState = {\r\n    shoppingCart: [],\r\n    totalCartQuantity: 0,\r\n    totalCartAmount: 0\r\n}\r\n\r\n\r\n\r\n\r\nconst cartReducer = (state = initState, action) => {\r\nswitch(action.type) {\r\n    case actiontypes().cart.add:\r\n        let itemIndex = state.shoppingCart.findIndex(product => product._id === action.payload._id)\r\n        //itemIndex < 0\r\n       // ? state.shoppingCart = [...state.shoppingCart, {...action.payload, quantity: 1}]\r\n        //: state.shoppingCart[itemIndex].quantity += 1\r\n        if(itemIndex < 0) {\r\n        return {\r\n           ...state,\r\n           shoppingCart: [...state.shoppingCart, {...action.payload, quantity: 1}]\r\n       }\r\n    } else {\r\n        return {\r\n            ...state\r\n        }\r\n    }\r\n       \r\n\r\n    default:\r\n        return state\r\n }\r\n}\r\n\r\nexport default cartReducer;"]},"metadata":{},"sourceType":"module"}