{"ast":null,"code":"import actiontypes from \"../actiontypes\";\nconst initState = {\n  shoppingCart: [],\n  totalCartQuantity: 0,\n  totalCartAmount: 0\n};\n\nconst cartReducer = (state = initState, action) => {\n  switch (action.type) {\n    case actiontypes().cart.add:\n      let itemIndex = state.shoppingCart.findIndex(product => product._id === action.payload._id);\n      itemIndex < 0 ? state.shoppingCart = [...state.shoppingCart, { ...action.payload,\n        quantity: 1\n      }] : state.shoppingCart[itemIndex].quantity += 1;\n      state.totalCartAmount = getTotalAmount(state.shoppingCart);\n      return state;\n\n    /* if(itemIndex < 0) {\r\n    return {\r\n       ...state,\r\n       shoppingCart: [...state.shoppingCart, {...action.payload, quantity: 1}]\r\n    }\r\n    } else {\r\n    \r\n    } */\n\n    case actiontypes().cart.sub:\n      let ite;\n\n    default:\n      return state;\n  }\n};\n\nconst getTotalAmount = cart => {\n  let total = 0;\n  cart.forEach(product => {\n    total += product.price * product.quantity;\n  });\n  return total;\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["U:/Working-progress/INLÄMNINGSUPPGIFTER/JV 3 INLÄMNINGSUPPGIFT/Inlämningsuppgift/JS-3/e-com/src/store/reducers/cartReducer.js"],"names":["actiontypes","initState","shoppingCart","totalCartQuantity","totalCartAmount","cartReducer","state","action","type","cart","add","itemIndex","findIndex","product","_id","payload","quantity","getTotalAmount","sub","ite","total","forEach","price"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,gBAAxB;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,YAAY,EAAE,EADA;AAEdC,EAAAA,iBAAiB,EAAE,CAFL;AAGdC,EAAAA,eAAe,EAAE;AAHH,CAAlB;;AASA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,SAAT,EAAoBM,MAApB,KAA+B;AACnD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKR,WAAW,GAAGS,IAAd,CAAmBC,GAAxB;AACI,UAAIC,SAAS,GAAGL,KAAK,CAACJ,YAAN,CAAmBU,SAAnB,CAA6BC,OAAO,IAAIA,OAAO,CAACC,GAAR,KAAgBP,MAAM,CAACQ,OAAP,CAAeD,GAAvE,CAAhB;AACAH,MAAAA,SAAS,GAAG,CAAZ,GACEL,KAAK,CAACJ,YAAN,GAAqB,CAAC,GAAGI,KAAK,CAACJ,YAAV,EAAwB,EAAC,GAAGK,MAAM,CAACQ,OAAX;AAAoBC,QAAAA,QAAQ,EAAE;AAA9B,OAAxB,CADvB,GAEEV,KAAK,CAACJ,YAAN,CAAmBS,SAAnB,EAA8BK,QAA9B,IAA0C,CAF5C;AAIAV,MAAAA,KAAK,CAACF,eAAN,GAAwBa,cAAc,CAACX,KAAK,CAACJ,YAAP,CAAtC;AAEA,aAAOI,KAAP;;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,SAAKN,WAAW,GAAGS,IAAd,CAAmBS,GAAxB;AACI,UAAIC,GAAJ;;AAGJ;AACI,aAAOb,KAAP;AAxBR;AA0BC,CA3BD;;AA8BA,MAAMW,cAAc,GAAGR,IAAI,IAAI;AAC3B,MAAIW,KAAK,GAAG,CAAZ;AAEAX,EAAAA,IAAI,CAACY,OAAL,CAAaR,OAAO,IAAI;AACpBO,IAAAA,KAAK,IAAIP,OAAO,CAACS,KAAR,GAAgBT,OAAO,CAACG,QAAjC;AACH,GAFD;AAIA,SAAOI,KAAP;AACH,CARD;;AAUA,eAAef,WAAf","sourcesContent":["import actiontypes from \"../actiontypes\";\r\n\r\nconst initState = {\r\n    shoppingCart: [],\r\n    totalCartQuantity: 0,\r\n    totalCartAmount: 0\r\n}\r\n\r\n\r\n\r\n\r\nconst cartReducer = (state = initState, action) => {\r\nswitch(action.type) {\r\n    case actiontypes().cart.add:\r\n        let itemIndex = state.shoppingCart.findIndex(product => product._id === action.payload._id)\r\n        itemIndex < 0\r\n        ? state.shoppingCart = [...state.shoppingCart, {...action.payload, quantity: 1}]\r\n        : state.shoppingCart[itemIndex].quantity += 1\r\n\r\n        state.totalCartAmount = getTotalAmount(state.shoppingCart)\r\n\r\n        return state\r\n        /* if(itemIndex < 0) {\r\n        return {\r\n           ...state,\r\n           shoppingCart: [...state.shoppingCart, {...action.payload, quantity: 1}]\r\n       }\r\n    } else {\r\n        \r\n    } */\r\n\r\n    case actiontypes().cart.sub:\r\n        let ite\r\n       \r\n\r\n    default:\r\n        return state\r\n }\r\n}\r\n\r\n\r\nconst getTotalAmount = cart => {\r\n    let total = 0;\r\n\r\n    cart.forEach(product => {\r\n        total += product.price * product.quantity\r\n    })\r\n\r\n    return total; \r\n}\r\n\r\nexport default cartReducer;"]},"metadata":{},"sourceType":"module"}